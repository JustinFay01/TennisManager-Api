// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using tennismanager_api.tennismanager.data;
using tennismanager.data;

#nullable disable

namespace tennismanager_api.tennismanager.data.Migrations
{
    [DbContext(typeof(TennisManagerContext))]
    [Migration("20240609003057_seedData")]
    partial class seedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.Abstract.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.CoachPackagePrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PackageId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CoachPackagePrices");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.CustomerPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DatePurchased")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsesRemaining")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PackageId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CustomerPackages");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.CustomerSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOccurred")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CustomerSessions");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DefaultPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Uses")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.Coach", b =>
                {
                    b.HasBaseType("tennismanager_api.tennismanager.data.Entities.Abstract.User");

                    b.HasDiscriminator().HasValue("Coach");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.Customer", b =>
                {
                    b.HasBaseType("tennismanager_api.tennismanager.data.Entities.Abstract.User");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.CoachPackagePrice", b =>
                {
                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Coach", "Coach")
                        .WithMany("PackagePricesList")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Abstract.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Package", "Package")
                        .WithMany("PackagePricesList")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Abstract.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Coach");

                    b.Navigation("CreatedBy");

                    b.Navigation("Package");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.CustomerPackage", b =>
                {
                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Abstract.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Customer", "Customer")
                        .WithMany("Packages")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Package", "Package")
                        .WithMany("Customers")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Abstract.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");

                    b.Navigation("Package");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.CustomerSession", b =>
                {
                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Abstract.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Customer", "Customer")
                        .WithMany("ParticipatedSessions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Session", "Session")
                        .WithMany("CustomerSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Abstract.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");

                    b.Navigation("Session");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.Package", b =>
                {
                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Abstract.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Abstract.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.Session", b =>
                {
                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Abstract.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tennismanager_api.tennismanager.data.Entities.Abstract.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.Package", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("PackagePricesList");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.Session", b =>
                {
                    b.Navigation("CustomerSessions");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.Coach", b =>
                {
                    b.Navigation("PackagePricesList");
                });

            modelBuilder.Entity("tennismanager_api.tennismanager.data.Entities.Customer", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("ParticipatedSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
